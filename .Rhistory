key <- 'h3bYbJ7SsUZUp3S2nMV3RFJXGkpLoQjI'
getwd()
install.packages('curl')
.libPath()
.libpaths()
.libPaths()
.detectCores()
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which('make')
install.packages('curl')
install.packages('parallel')
parallel::detectCores()
key <- 'h3bYbJ7SsUZUp3S2nMV3RFJXGkpLoQjI'
endpoint <- "https://marsapi.ams.usda.gov/services/v1.2/reports"
install.packages('httr')
library(httr)
parallel::detectCores(logical = FALSE)
result <- httr::GET(endpoint, add_headers(Authorization = paste('Key', key)))
result
result.content
result.contents
endpoint <- "https://marsapi.ams.usda.gov/services/v1.2/reports -u"
result$content
result$status_code
result <- httr::GET(endpoint, add_headers(Authorization = paste('api_key', key)))
result$status_code
result$content
jsonlite::fromJSON(httr::content(result, as = "text", encoding = 'UTF-8'))
httr::content(result, as = "text", encoding = 'UTF-8')
endpoint <- "https://marsapi.ams.usda.gov/services/v1.2/reports"
library(httr)
result <- httr::GET(endpoint, add_headers(Authorization = paste('api_key', key)))
result$status_code
httr::content(result, as = "text", encoding = 'UTF-8')
key <- 'h3bYbJ7SsUZUp3S2nMV3RFJXGkpLoQjI'
endpoint <- "https://marsapi.ams.usda.gov/services/v1.2/reports"
library(httr)
result <- httr::GET(endpoint, add_headers(Authorization = paste('-u api_key:', key)))
result$status_code
httr::content(result, as = "text", encoding = 'UTF-8')
result <- httr::GET(endpoint, add_headers(Authorization = paste('-H "Basic<Base64EncodedApiKey:>"', key)))
result$status_code
httr::content(result, as = "text", encoding = 'UTF-8')
result <- httr::GET(endpoint, add_headers(Authorization = paste('-u', key)))
result$status_code
httr::content(result, as = "text", encoding = 'UTF-8')
endpoint <- "https://marsapi.ams.usda.gov/services/v1.2/reports/1095"
result <- httr::GET(endpoint, add_headers(Authorization = paste('-u', key)))
result$status_code
result <- httr::GET(endpoint, query = list(api_key = key))
result$status_code
result$content
httr::content(result, as = "text", encoding = 'UTF-8')
endpoint <- "https://marsapi.ams.usda.gov/services/v1.2/reports/"
result <- httr::GET(endpoint, query = list(api_key = key))
httr::content(result, as = "text", encoding = 'UTF-8')
key <- 'h3bYbJ7SsUZUp3S2nMV3RFJXGkpLoQjI:'
result <- httr::GET(endpoint, query = list(api_key = key))
httr::content(result, as = "text", encoding = 'UTF-8')
endpoint <- "https://marsapi.ams.usda.gov/services/v1.2/reports/ -u h3bYbJ7SsUZUp3S2nMV3RFJXGkpLoQjI"
result <- httr::GET(endpoint)
result$status_code
jsonlite::fromJSON(httr::content(result, as = "text", encoding = 'UTF-8'))
httr::content(result, as = "text", encoding = 'UTF-8')
key <- 'h3bYbJ7SsUZUp3S2nMV3RFJXGkpLoQjI'
endpoint <- "https://marsapi.ams.usda.gov/services/v1.2/reports/"
key <- 'h3bYbJ7SsUZUp3S2nMV3RFJXGkpLoQjI'
endpoint <- "https://marsapi.ams.usda.gov/services/v1.2/reports/"
library(httr)
result <- httr::GET(endpoint, add_headers(Authorization = paste('-u', key)))
result$status_code
result$content
httr::content(result, as = "text", encoding = 'UTF-8')
result <- httr::GET(endpoint, add_headers(Authorization = paste('-u ', key)))
httr::content(result, as = "text", encoding = 'UTF-8')
endpoint <- "https://marsapi.ams.usda.gov/services/v1.1/reports/"
library(httr)
result <- httr::GET(endpoint, add_headers(Authorization = paste('-u ', key)))
httr::content(result, as = "text", encoding = 'UTF-8')
result <- httr::GET(endpoint, add_headers(Authorization = paste('-u api_key:', key)))
httr::content(result, as = "text", encoding = 'UTF-8')
key <- 'h3bYbJ7SsUZUp3S2nMV3RFJXGkpLoQjI:'
result <- httr::GET(endpoint, add_headers(Authorization = paste('-u ', key)))
httr::content(result, as = "text", encoding = 'UTF-8')
x <- paste0(endpoint, ' -u ', key, ':')
x <- paste0(c(endpoint, ' -u ', key, ':'))
x
x <- paste0(c(endpoint, ' -u ', key, ':'), collapse = '')
x
key <- 'h3bYbJ7SsUZUp3S2nMV3RFJXGkpLoQjI'
x <- paste0(c(endpoint, ' -u ', key, ':'), collapse = '')
result <- httr::GET(x)
httr::content(result, as = "text", encoding = 'UTF-8')
x <- paste0(c(endpoint, ' ', key, ':'), collapse = '')
x
result <- httr::GET(x)
httr::content(result, as = "text", encoding = 'UTF-8')
httr::GET(endpoint, authenticate(key, ""))
x <- httr::GET(endpoint, authenticate(key, ""))
result <- httr::GET(endpoint, authenticate(key, ""))
httr::content(result, as = "text", encoding = 'UTF-8')
jsonlite::fromJSON(httr::content(result, as = "text", encoding = 'UTF-8'))
endpoint <- "https://marsapi.ams.usda.gov/services/v1.2/reports/"
result <- httr::GET(endpoint, authenticate(key, ""))
httr::content(result, as = "text", encoding = 'UTF-8')
jsonlite::fromJSON(httr::content(result, as = "text", encoding = 'UTF-8'))
httr::content(result, as = "text", encoding = 'UTF-8')
endpoint <- "https://marsapi.ams.usda.gov/services/v1.2/reports/1095"
result <- httr::GET(endpoint, authenticate(key, ""))
httr::content(result, as = "text", encoding = 'UTF-8')
jsonlite::fromJSON(httr::content(result, as = "text", encoding = 'UTF-8'))
endpoint <- "https://marsapi.ams.usda.gov/services/v1.2/reports/"
result <- httr::GET(endpoint, authenticate(key, ""))
jsonlite::fromJSON(httr::content(result, as = "text", encoding = 'UTF-8'))
jsonlite::fromJSON(httr::content(result, as = "text", encoding = 'UTF-8'))
report_list <- jsonlite::fromJSON(httr::content(result, as = "text", encoding = 'UTF-8'))
install.packages('dplyr')
out <- dplyr::mutate_at(report_list, vars(markets:offices), unlist)
out <- dplyr::mutate_at(report_list, dplyr::vars(markets:offices), unlist)
out <- dplyr::mutate_at(report_list, dplyr::vars(slug_id:published_date), unlist)
View(out)
out
View(out)
out <- dplyr::mutate_at(report_list, dplyr::vars(slug_id:markets), unlist)
out$markets
unlist(out$markets)
test <- unlist(lapply(report_list$sectionNames, function(i) paste0(i, collapse = ', ')))
out <- report_list %>%
mutate_if(is.list(), function(x) unlist(lapply(x, function(i) paste0(i, collapse = ', '))))
out <- mutate_if(report_list, is.list(), function(x) unlist(lapply(x, function(i) paste0(i, collapse = ', '))))
out <- dplyr::mutate_if(report_list, is.list(), function(x) unlist(lapply(x, function(i) paste0(i, collapse = ', '))))
library(dplyr)
out <- report_list %>%
mutate_if(is.list(), function(x) unlist(lapply(x, function(i) paste0(i, collapse = ', '))))
out <- report_list %>%
mutate_if(is.list, function(x) unlist(lapply(x, function(i) paste0(i, collapse = ', '))))
View(out)
if x
print('s')
get_reports <- function(...){
if (exists(key) == FALSE){
stop('API key does not exist.')
}
endpoint <- "https://marsapi.ams.usda.gov/services/v1.2/reports/"
response <- httr::GET(endpoint, authenticate(key, ""))
result <- jsonlite::fromJSON(httr::content(response, as = "text", encoding = 'UTF-8'))
result <- dplyr::mutate_if(result, is.list, function(x) unlist(lapply(x, function(i) paste0(i, collapse = ', '))))
return(result)
}
test <- get_reports()
exists(key)
missing(key)
get_reports <- function(...){
if (missing(key)){
stop('API key does not exist.')
}
endpoint <- "https://marsapi.ams.usda.gov/services/v1.2/reports/"
response <- httr::GET(endpoint, authenticate(key, ""))
result <- jsonlite::fromJSON(httr::content(response, as = "text", encoding = 'UTF-8'))
result <- dplyr::mutate_if(result, is.list, function(x) unlist(lapply(x, function(i) paste0(i, collapse = ', '))))
return(result)
}
test <- get_reports()
get_reports <- function(...){
key <- get("key", envir = .GlobalEnv)
if (missing(key)){
stop('API key does not exist.')
}
endpoint <- "https://marsapi.ams.usda.gov/services/v1.2/reports/"
response <- httr::GET(endpoint, authenticate(key, ""))
result <- jsonlite::fromJSON(httr::content(response, as = "text", encoding = 'UTF-8'))
result <- dplyr::mutate_if(result, is.list, function(x) unlist(lapply(x, function(i) paste0(i, collapse = ', '))))
return(result)
}
test <- get_reports()
View(test)
rm(key)
test <- get_reports()
?missing
tryCatch(key <- get("key", envir = .GlobalEnv))
tryCatch({key <- get("key", envir = .GlobalEnv)},
error = function(cond){message('x')})
tryCatch({key <- get("key", envir = .GlobalEnv)},
error = function(cond){
stop('API key does not exist.')})
tryCatch({key <- get("key", envir = .GlobalEnv)},
error = function(cond){
message('API key does not exist.')})
stop()
tryCatch({key <- get("key", envir = .GlobalEnv)},
error = function(cond){
stop()
message('API key does not exist.')})
key <- tryCatch({get("key", envir = .GlobalEnv)},
error = function(cond){
return(NA)})
stop('ss')
key <- tryCatch({get("key", envir = .GlobalEnv)},
error = function(cond){
stop('ss')})
key <- tryCatch({get("key", envir = .GlobalEnv)},
error = function(cond){
stop('API key does not exist.')})
rm(key)
key <- tryCatch({get("key", envir = .GlobalEnv)},
error = function(cond){
stop('API key does not exist.')})
get_reports <- function(...){
key <- tryCatch({get("key", envir = .GlobalEnv)},
error = function(cond){NA})
if (is.na(key)){
stop('API key does not exist.')
}
endpoint <- "https://marsapi.ams.usda.gov/services/v1.2/reports/"
response <- httr::GET(endpoint, authenticate(key, ""))
result <- jsonlite::fromJSON(httr::content(response, as = "text", encoding = 'UTF-8'))
result <- dplyr::mutate_if(result, is.list, function(x) unlist(lapply(x, function(i) paste0(i, collapse = ', '))))
return(result)
}
test <- get_reports()
key <- 'kk'
test <- get_reports()
response <- httr::GET(endpoint, authenticate(key, ""))
response$content
httr::content(response, as = "text", encoding = 'UTF-8')
cat(httr::content(response, as = "text", encoding = 'UTF-8'), '\n')
cat(httr::content(response, as = "parsed", encoding = 'UTF-8'), '\n')
cleanFun <- function(htmlString) {
return(gsub("<.*?>", "", htmlString))
}
cleanFun(httr::content(response, as = "parsed", encoding = 'UTF-8'))
cleanFun(httr::content(response, as = "text", encoding = 'UTF-8'))
return(gsub("<.*?>", " ", htmlString))
cleanFun <- function(htmlString) {
return(gsub("<.*?>", " ", htmlString))
}
cleanFun(httr::content(response, as = "text", encoding = 'UTF-8'))
install.packages('rvest')
install.packages(rvest)
library(rvest)
x <- httr::content(response, as = "parsed", encoding = 'UTF-8')
x
x <- httr::content(response, as = "text", encoding = 'UTF-8')
html_text(read_html(x))
html_text(x)
html_text(read_html(x))
test <- get_reports()
response$status_code
get_reports <- function(...){
key <- tryCatch({get("key", envir = .GlobalEnv)},
error = function(cond){NA})
if (is.na(key)){
stop('API key does not exist.')
}
endpoint <- "https://marsapi.ams.usda.gov/services/v1.2/reports/"
response <- httr::GET(endpoint, authenticate(key, ""))
if (response$status_code == 401){
text_ <- httr::content(response, as = "text", encoding = 'UTF-8')
stop(html_text(read_html(text_)))
}
result <- jsonlite::fromJSON(httr::content(response, as = "text", encoding = 'UTF-8'))
result <- dplyr::mutate_if(result, is.list, function(x) unlist(lapply(x, function(i) paste0(i, collapse = ', '))))
return(result)
}
test <- get_reports()
get_reports <- function(...){
key <- tryCatch({get("key", envir = .GlobalEnv)},
error = function(cond){NA})
if (is.na(key)){
stop('API key does not exist.')
}
endpoint <- "https://marsapi.ams.usda.gov/services/v1.2/reports/"
response <- httr::GET(endpoint, authenticate(key, ""))
if (response$status_code != 200){
text_ <- httr::content(response, as = "text", encoding = 'UTF-8')
stop(html_text(read_html(text_)))
}
result <- jsonlite::fromJSON(httr::content(response, as = "text", encoding = 'UTF-8'))
result <- dplyr::mutate_if(result, is.list, function(x) unlist(lapply(x, function(i) paste0(i, collapse = ', '))))
return(result)
}
key <- 'kk'
test <- get_reports()
sessionInfo()
rm(list = ls())
library(lfe)
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stargazer)
setwd('~')
# Read regression data
CornDataReg <- fread('CornRegressionData.csv')
rm(list = ls())
library(lfe)
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stargazer)
setwd('~')
# Read regression data
CornDataReg <- fread('CornRegressionData.csv')
getwd()
setwd(getSrcDirectory()[1])
getSrcDirectory
getSrcDirectory()
utils::getSrcDirectory()
dirname(rstudioapi::getActiveDocumentContext()$path)
install.packages('rstudioapi')
dirname(rstudioapi::getActiveDocumentContext()$path)
# Set working directory to current folder.
dirname(rstudioapi::getActiveDocumentContext()$path)
# Read regression data
CornDataReg <- fread('CornRegressionData.csv')
getwd()
# Set working directory to current folder.
dirname(rstudioapi::getActiveDocumentContext()$path)
# Read regression data
CornDataReg <- fread('CornRegressionData.csv')
getwd()
setwd(system("pwd", intern = TRUE))
library(usdamars)
